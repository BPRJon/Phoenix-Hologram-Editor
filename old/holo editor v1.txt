--VERSION1
--@name Phoenix Holo Editor
--@author jon b
--@shared
if CLIENT then
    if player() == owner() then
    local editorEnableKey = KEY.P --change P to whatever key you want
    local COLORS = {
        background = Color(50,50,50),
        border = Color(155,155,155),
        text = Color(255,255,255),
        textoutline = Color(0,0,0),
        font = "Trebuchet18"
    }
    local AUTOSAVE_interval = 60 --in seconds. currently doesnt do anything
    local UI_SHOWICONS = true --if you are getting laggy performace turn this off. uses ~1-2k cpu
    local circle_radius = 10 --gizmo grabber size in pixels
    
    
    
    
    
    enableHud(owner(),true)
    Origin = hologram.create(chip():getPos(),Angle(),"models/sprops/misc/axis_plane.mdl",Vector(1))
    
    local HologramData = {}
    local Holograms = {}
    
    local function PHE_save(path)
        HologramData = {}
        for i,v in pairs(Holograms) do
            table.insert(HologramData,{
                Index = v.Name,
                Position = Origin:worldToLocal(v:getPos()),
                Angle = v:getAngles(),
                Model = v:getModel(),
                Scale = v:getScale(),
                Color = v:getColor(),
                Material = v:getMaterial(),
                Parent = v:getParent(),
                Clips = v:getClipping()
                })
        end
        file.write("PhoenixHoloEditor/saves/"..path..".txt",von.serialize(HologramData))
        timer.simple(0,function() if file.exists("PhoenixHoloEditor/saves/"..path..".txt") then print("File saved succesfully!\nPhoenixHoloEditor/saves/"..path..".txt") else print("File not found in the saves folder... double check it's there.") end end)
    end
    local function PHE_load(path)
        local holodata = von.deserialize(file.read(path))
        local originpos = Origin:getPos()
        local createholo = hologram.create
        
        hook.add("think","PHE_load_createholos",function()
            for i,v in pairs(holodata) do
                local holo = createholo(originpos+v.Position,v.Angle,v.Model,v.Scale)
                table.insert(Holograms,holo)
                if i == table.count(holodata) then hook.remove("think","PHE_load_createholos") end
            end
        end)
    end
    
    if not file.exists("PhoenixHoloEditor/") then file.createDir("PhoenixHoloEditor") file.createDir("PhoenixHoloEditor/saves") file.createDir("PhoenixHoloEditor/autosaves") file.createDir("PhoenixHoloEditor/data") end
    
    local menuToggle = false
    local activeButton = nil
    local cursorX,cursorY = input.getCursorPos()
    local moveXclk,moveYclk,moveZclk,changeModeClk
    local gizmoMode = 1
    local trace_intersectRayWithPlane = trace.intersectRayWithPlane
    local render_getEyePos = render.getEyePos
    local input_screenToVector = input.screenToVector
    local oldHitVec = Vector(0)
    local function think_Gizmo()
        if isValid(Holograms[activeButton]) then
            local ent = Holograms[activeButton]
            local entPos,entAng = ent:getPos(),ent:getAngles()
            local delta = input_screenToVector(cursorX,cursorY)
            if changed("didTheyChangeGizmoMode",changeModeClk) and input_LEFTCLICK then gizmoMode = gizmoMode + 1 if gizmoMode > 3 then gizmoMode = 1 end end
            if changed("didTheyClickXGizmo",moveXclk) then local planeNormal = Vector(math.normalizeAngle((render_getEyePos()-entPos):getAngle().r)/180,0,1) oldHitVec = trace_intersectRayWithPlane(render_getEyePos(),delta,entPos,planeNormal) end
            if moveXclk then
                local planeNormal = Vector(math.normalizeAngle((render_getEyePos()-entPos):getAngle().r)/180,0,1)
                local newHitVec = trace_intersectRayWithPlane(render_getEyePos(),delta,entPos,planeNormal)
                if newHitVec then
                    if gizmoMode == 1 then ent:setPos(entPos+Vector(newHitVec.x-oldHitVec.x,0,0):getRotated(entAng))
                    elseif gizmoMode == 2 then ent:setAngles(Angle((newHitVec-entPos):getAngle().y,0,0))
                    else
                    end
                    oldHitVec = newHitVec
                end
            end
            if changed("didTheyClickYGizmo",moveYclk) then local planeNormal = Vector(0,math.normalizeAngle((render_getEyePos()-entPos):getAngle().p)/180,1) oldHitVec = trace_intersectRayWithPlane(render_getEyePos(),delta,entPos,planeNormal) end
            if moveYclk then
                local planeNormal = Vector(0,math.normalizeAngle((render_getEyePos()-entPos):getAngle().p)/180,1)
                local newHitVec = trace_intersectRayWithPlane(render_getEyePos(),delta,entPos,planeNormal)
                if newHitVec then
                    ent:setPos(entPos+Vector(0,newHitVec.y-oldHitVec.y,0):getRotated(entAng))
                    oldHitVec = newHitVec
                end
            end
            if changed("didTheyClickZGizmo",moveZclk) then local planeNormal = Vector(1,math.normalizeAngle((render_getEyePos()-entPos):getAngle().y)/180,0) oldHitVec = trace_intersectRayWithPlane(render_getEyePos(),delta,entPos,planeNormal) end
            if moveZclk then
                local planeNormal = Vector(1,math.normalizeAngle(math.round((render_getEyePos()-entPos):getAngle().y)/180,-1),0)
                local newHitVec = trace_intersectRayWithPlane(render_getEyePos(),delta,entPos,planeNormal)
                if newHitVec then
                    ent:setPos(entPos+Vector(0,0,newHitVec.z-oldHitVec.z):getRotated(entAng))
                    oldHitVec = newHitVec
                end
            end
        end
    end
    hook.add("Think","PhoenixEditor-Think",function()
        local enableClk = not owner():isTyping() and changed("editorEnableCheck",input.isKeyDown(editorEnableKey)) and input.isKeyDown(editorEnableKey)
        if input.canLockControls() and enableClk then input.enableCursor(true) input.lockControls(true) elseif not input.canLockControls() and enableClk then print("Can't lock controls! Please wait!") end
        if not input.isControlLocked() and input.getCursorVisible() then input.enableCursor(false) end
        
        if input.isControlLocked() then
            if changed("OpenSpawnmenu",input.isKeyDown(KEY.Q)) and input.isKeyDown(KEY.Q) then if menuToggle then concmd("-menu") else concmd("+menu") end menuToggle = !menuToggle end
        end
        
        cursorX,cursorY = input.getCursorPos()
        input_LEFTCLICK = input.isMouseDown(MOUSE.LEFT)
        changed_LEFTCLICK = changed("UserLeftClicked",input.isMouseDown(MOUSE.LEFT))
        
        think_Gizmo()
        end)
        
    local oldX,oldY = input.getCursorPos()
    local camPos = chip():getPos()+Vector(-100,0,0)
    local camAngle = Angle()
    hook.add("mouseWheeled","PhoenixEditor-wheelmove",function(delta)
        if input.isControlLocked() then camPos = camPos+Vector(delta*10,0,0):getRotated(camAngle) end
        end)
    local drawPlayer = true
    hook.add("CalcView","PhoenixEditor-CalcView",function()
        if input.isControlLocked() then
            camPos = camPos + Vector(boolToFloat(input.isKeyDown(KEY.W))-boolToFloat(input.isKeyDown(KEY.S)),boolToFloat(input.isKeyDown(KEY.A))-boolToFloat(input.isKeyDown(KEY.D)),boolToFloat(input.isKeyDown(KEY.SPACE))-boolToFloat(input.isKeyDown(KEY.CTRL))):getRotated(camAngle)
            if changed("UserRightClickCamControl",input.isMouseDown(MOUSE.RIGHT)) then oldX,oldY = input.getCursorPos() end
            if input.isMouseDown(MOUSE.RIGHT) then
                if changed("moveCursorCalcViewX",cursorX) or changed("moveCursorCalcViewY",cursorY) then camAngle = camAngle + Angle((cursorY-oldY)/3,math.clamp(-(cursorX-oldX)/3,-15,15),0) oldX,oldY = input.getCursorPos() end
                camAngle:setP(math.clamp(camAngle.p,-90,90))
            end
            local view = {
                origin = camPos,
                angles = camAngle,
                drawviewer = drawPlayer
            }
            return view
        end
        end)
    local entityClassWhitelist = {"prop_physics"}
    hook.add("OnEntityCreated","PhoenixEditor-SpawnProps",function(e)
        if input.isControlLocked() and isValid(e) and e:getOwner() == owner() and table.hasValue(entityClassWhitelist,e:getClass()) then
            local _hologram = hologram.create(Origin:getPos(),Origin:getAngles(),e:getModel(),Vector(1))
            table.insert(Holograms,_hologram)
            net.start("RemoveSpawnedEntity") net.writeEntity(e) net.send(owner())
        end
        end)
    local resX,resY = render.getGameResolution()
    local editorstart,editorend = resX*0.9,resX*0.1
    local infopanelstart,infopanelend = resY*0.66,resY*0.34
    
    local render_setColor = render.setColor
    local render_drawRect = render.drawRect
    local render_drawRectOutline = render.drawRectOutline
    local render_drawSimpleTextOutlined = render.drawSimpleTextOutlined
    local render_setMaterial = render.setMaterial
    local render_drawTexturedRectFast = render.drawTexturedRectFast
    local render_getTextSize = render.getTextSize
    local render_drawLine = render.drawLine
    local render_drawCircle = render.drawCircle
    local render_drawRectOutline = render.drawRectOutline
    local render_drawRectRotated = render.drawRectRotated
    
    local function ui_Button(index,x,y,text,func)
        local textX,textY = render_getTextSize(text)
        local clk = input_LEFTCLICK and cursorX > x and cursorY > y and cursorX < x+textX+3 and cursorY < y+textY+3
        if clk and activeButton ~= index then activeButton = index end
        if activeButton == index then func() render_setColor(COLORS.border) render_drawRect(x,y,textX+3,textY+3) end
        
        render_setColor(COLORS.text)
        render_drawRectOutline(x,y,textX+3,textY+3)
        render_drawSimpleTextOutlined(x+1.5,y+1.5,text,1,COLORS.textoutline,TEXT_ALIGN.LEFT,TEXT_ALIGN.TOP)
    end
    local function button(x,y,text,func)
        local textX,textY = render_getTextSize(text)
        local clk = input_LEFTCLICK and changed_LEFTCLICK and cursorX > x and cursorY > y and cursorX < x+textX+3 and cursorY < y+textY+3
        if clk then render_setColor(COLORS.border) render_drawRect(x,y,textX+3,textY+3) end
        render_setColor(COLORS.border)
        render_drawRectOutline(x,y,textX+3,textY+3)
        render_setColor(COLORS.text)
        render_drawSimpleTextOutlined(x+1.5,y+1.5,text,1,COLORS.textoutline,TEXT_ALIGN.LEFT,TEXT_ALIGN.TOP)
        if clk then return func() end
    end
    local switchBoolTable = {}
    local function switch(index,x,y,text,func)
        local textX,textY = render_getTextSize(text)
        local clk = input_LEFTCLICK and changed_LEFTCLICK and cursorX > x and cursorY > y and cursorX < x+textX+3 and cursorY < y+textY+3
        if switchBoolTable[index] == nil then switchBoolTable[index] = false elseif switchBoolTable[index] then render_setColor(COLORS.border) render_drawRect(x,y,textX+3,textY+3) end
        if clk then switchBoolTable[index] = !switchBoolTable[index] if switchBoolTable[index] then func() end end
        
        render_setColor(COLORS.border)
        render_drawRectOutline(x,y,textX+3,textY+3)
        render_setColor(COLORS.text)
        render_drawSimpleTextOutlined(x+1.5,y+1.5,text,1,COLORS.textoutline,TEXT_ALIGN.LEFT,TEXT_ALIGN.TOP)
        
        return switchBoolTable[index]
    end
    local math_distance = math.distance
    local function ui_Gizmo()
        if isValid(Holograms[activeButton]) then
            local ent = Holograms[activeButton]
            local pos,ang = ent:getPos(),ent:getAngles()
            local screenPos,screenWX,screenWY,screenWZ = pos:toScreen(),(pos+Vector(20,0,0):getRotated(ang)):toScreen(),(pos+Vector(0,20,0):getRotated(ang)):toScreen(),(pos+Vector(0,0,20):getRotated(ang)):toScreen()
            if changed_LEFTCLICK then moveXclk,moveYclk,moveZclk,changeModeClk = math_distance(screenWX.x,screenWX.y,cursorX,cursorY) < circle_radius and input_LEFTCLICK,math_distance(screenWY.x,screenWY.y,cursorX,cursorY) < circle_radius and input_LEFTCLICK,math_distance(screenWZ.x,screenWZ.y,cursorX,cursorY) < circle_radius and input_LEFTCLICK, math_distance(screenPos.x,screenPos.y,cursorX,cursorY) < circle_radius and input_LEFTCLICK end
            render_setColor(Color(255,255,0))
            if gizmoMode == 1 then render_drawLine(screenPos.x,screenPos.y-circle_radius,screenPos.x-circle_radius,screenPos.y+circle_radius) render_drawLine(screenPos.x,screenPos.y-circle_radius,screenPos.x+circle_radius,screenPos.y+circle_radius) render_drawLine(screenPos.x-circle_radius,screenPos.y+circle_radius,screenPos.x+circle_radius,screenPos.y+circle_radius)
            elseif gizmoMode == 2 then render_drawCircle(screenPos.x,screenPos.y,circle_radius)
            elseif gizmoMode == 3 then render_drawRectOutline(screenPos.x-circle_radius,screenPos.y-circle_radius,circle_radius*2,circle_radius*2)
            end
            render_setColor(Color(255,0,0))
            render_drawLine(screenPos.x,screenPos.y,screenWX.x,screenWX.y)
            render_drawCircle(screenWX.x,screenWX.y,circle_radius)
            render_setColor(Color(0,255,0))
            render_drawLine(screenPos.x,screenPos.y,screenWY.x,screenWY.y)
            render_drawCircle(screenWY.x,screenWY.y,circle_radius)
            render_setColor(Color(0,0,255))
            render_drawLine(screenPos.x,screenPos.y,screenWZ.x,screenWZ.y)
            render_drawCircle(screenWZ.x,screenWZ.y,circle_radius)
        end
    end
    local mat = material.create("UnlitGeneric")
    local function ui_Spawnicon(x,y,path)
        mat:setTexture("$basetexture","spawnicons/"..string.replace(path,"mdl","png"))
        render_setMaterial(mat)
        render_drawTexturedRectFast(x,y,24,24)
    end
    local function closeAllBools()
        for _,v in pairs(switchBoolTable) do v = false end
        activeButton = nil
    end
    hook.add("postdrawhud","PhoenixEditor-DrawHud",function()
        if input.isControlLocked() then
            render.setFont(COLORS.font)
            render_setColor(COLORS.background)
            render.drawRectFast(editorstart,0,editorend,resY)
            render_setColor(COLORS.border)
            render_drawRectOutline(editorstart,infopanelstart,editorend,infopanelend,2)
            
            ui_Gizmo()
            
            ui_Button("PHE_FILE",editorstart,0,"FILE",function()
                button(editorstart+5,infopanelstart+(infopanelend*0.01),"QuickSave",function() PHE_save(os.date("%b")..os.date("%d")..os.date("%Y").."_"..os.time()) end)
                if switch("LoadPHE",editorstart+5,infopanelstart+(infopanelend*0.08),"Load from PHE",function()end) then
                    local files,dirs = file.find("phoenixholoeditor/saves/*","namedesc")
                    for i,v in pairs(files) do
                        button(editorstart-200,resY-(26*i),v,function() PHE_load("phoenixholoeditor/saves/"..v) closeAllBools() end)
                    end
                    for i,dir in pairs(dirs) do
                        if switch("phe_loadfromphe_"..dir,editorstart-200,resY-((26*(table.count(files)+1))*i),"/"..dir.."/",function() end) then
                            local files,_ = file.find("phoenixholoeditor/saves/"..dir.."/*","namedesc") for i,v in pairs(files) do button(editorstart-400,resY-(26*i),v,function() PHE_load("phoenixholoeditor/saves/"..dir.."/"..v) closeAllBools() end) end
                        end
                    end
                end
                if switch("LoadAuto",editorstart+5,infopanelstart+(infopanelend*0.12),"Load Autosave",function()end) then
                    local files,dirs = file.find("phoenixholoeditor/autosaves/*","namedesc")
                    for i,v in pairs(files) do
                        button(editorstart-200,resY-(26*i),v,function() PHE_load("phoenixholoeditor/autosaves/"..v) closeAllBools() end)
                    end
                    for i,dir in pairs(dirs) do
                        if switch("phe_loadfromphe_"..dir,editorstart-200,resY-((26*(table.count(files)+1))*i),"/"..dir.."/",function() end) then
                            local files,_ = file.find("phoenixholoeditor/autosaves/"..dir.."/*","namedesc") for i,v in pairs(files) do button(editorstart-400,resY-(26*i),v,function() PHE_load("phoenixholoeditor/autosaves/"..dir.."/"..v) closeAllBools() end) end
                        end
                    end
                end
                end)
            ui_Button("PHE_EDIT",editorstart+render_getTextSize("FILE")+10,0,"EDIT",function()
                end)
            ui_Button("PHE_TOOL",editorstart+render_getTextSize("FILE")+render_getTextSize("EDIT")+20,0,"TOOLS",function()
                button(editorstart,infopanelstart+(infopanelend*0.01),"Toggle Icons",function() UI_SHOWICONS = !UI_SHOWICONS end)
                button(editorstart,infopanelstart+(infopanelend*0.05),"Draw Player",function() drawPlayer = !drawPlayer end)
                end)
            for i,v in pairs(Holograms) do
                if UI_SHOWICONS then ui_Spawnicon(editorstart+4,30+(26*(i-1)),v:getModel()) end
                ui_Button(i,editorstart+30,30+(26*(i-1)),v:getModel(),function()  end)
            end
        end
        end)
        
    end
    
elseif SERVER then
    net.receive("RemoveSpawnedEntity",function() net.readEntity():remove() end)
end

changedTable = {}
function changed(index,obj)
    local bool = (obj ~= changedTable[index])
    changedTable[index] = obj
    return bool
end

function boolToFloat(bool)
    if bool then return 1 else return 0 end
end